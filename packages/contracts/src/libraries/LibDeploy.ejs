// SPDX-License-Identifier: Unlicense
pragma solidity >=0.8.0;

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";
import { Cheats } from "../test/utils/Cheats.sol";

// Solecs 
import { World } from "solecs/World.sol";
import { Component } from "solecs/Component.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { System } from "solecs/System.sol";

// Components
<% components.forEach(component => { -%>
import { <%= component.name %>, ID as <%= component.name %>ID } from "../components/<%- component.name %>.sol";
<% }); -%>

// Systems
<% systems.forEach(system => { -%>
import { <%= system.name %>, ID as <%= system.name %>ID } from "../systems/<%- system.name %>.sol";
<% }); -%>

struct DeployResult {
  World world;
  address deployer;
}

library LibDeploy {

  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : World(_world);
    if(_world == address(0)) result.world.init(); // Init if it's a fresh world

      // Deploy components
<% components.forEach((component, index) => { %>
      console.log("Deploying <%= component.name %>");
      <%= component.name + " " + component.nameString %> = new <%= component.name %>(address(result.world), "<%= component.idString %>");
      console.log(address(<%=component.nameString%>));
<% });%>

    World world = World(result.world);
    // Deploy systems
    System system; 
    IUint256Component components = world.components();
<% systems.forEach(system => { %>
  {
    console.log("Deploying <%= system.name %>");
    string memory <%= system.name%>Id = "<%= system.name %>";
    system = new <%= system.name %>(world, address(components), <%= system.name%>Id);
    <% system.readIds?.forEach(function callback(id, index) { %>
    system.addReadComponentIdAndAddress("<%= system.readIds[index] %>", address(system));
    <% }); %>
    <% system.writeIds?.forEach(function callback(id, index) { %>
    system.addWriteComponentIdAndAddress("<%= system.writeIds[index] %>", address(system));
    <% }); %>
    world.registerSystem(address(system), <%= system.name %>ID);
  }
    
<% system.writeAccess?.forEach(component => { -%>
    authorizeWriter(components, <%= component %>ID, address(system));
<% });-%>
<% if(system.initialize) { -%>
    system.execute(<%= system.initialize -%>);
<% } -%>
    console.log(address(system));
<% });%>
  }
  
  function authorizeWriter(IUint256Component components, uint256 componentId, address writer) internal {
    Component(getAddressById(components, componentId)).authorizeWriter(writer);
  }
}